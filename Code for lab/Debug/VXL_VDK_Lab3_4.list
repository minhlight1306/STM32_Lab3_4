
VXL_VDK_Lab3_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002a08  08002a08  00012a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08002a3c  08002a3c  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a3c  08002a3c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200000a0  08002ae4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08002ae4  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d94  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9a  00000000  00000000  00029e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002bbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171a3  00000000  00000000  0002d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd67  00000000  00000000  00044213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082521  00000000  00000000  00051f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d449b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  000d44f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a0 	.word	0x200000a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080029f0 	.word	0x080029f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a4 	.word	0x200000a4
 8000148:	080029f0 	.word	0x080029f0

0800014c <readKey>:
int TimeOutForKeyPress[NUM_OF_BUTTON] =  {500};
int button_pressed[NUM_OF_BUTTON] = {0};
int button_long_pressed[NUM_OF_BUTTON] = {0};
int button_flag[NUM_OF_BUTTON] = {0};

void readKey(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	Key[1] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);//mode
 8000150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000154:	480d      	ldr	r0, [pc, #52]	; (800018c <readKey+0x40>)
 8000156:	f001 fc1f 	bl	8001998 <HAL_GPIO_ReadPin>
 800015a:	4603      	mov	r3, r0
 800015c:	461a      	mov	r2, r3
 800015e:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <readKey+0x44>)
 8000160:	605a      	str	r2, [r3, #4]
	Key[2] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);//setting time
 8000162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000166:	4809      	ldr	r0, [pc, #36]	; (800018c <readKey+0x40>)
 8000168:	f001 fc16 	bl	8001998 <HAL_GPIO_ReadPin>
 800016c:	4603      	mov	r3, r0
 800016e:	461a      	mov	r2, r3
 8000170:	4b07      	ldr	r3, [pc, #28]	; (8000190 <readKey+0x44>)
 8000172:	609a      	str	r2, [r3, #8]
	Key[3] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);//enter
 8000174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000178:	4804      	ldr	r0, [pc, #16]	; (800018c <readKey+0x40>)
 800017a:	f001 fc0d 	bl	8001998 <HAL_GPIO_ReadPin>
 800017e:	4603      	mov	r3, r0
 8000180:	461a      	mov	r2, r3
 8000182:	4b03      	ldr	r3, [pc, #12]	; (8000190 <readKey+0x44>)
 8000184:	60da      	str	r2, [r3, #12]
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40011000 	.word	0x40011000
 8000190:	20000040 	.word	0x20000040

08000194 <isButtonPressed>:
int isButtonPressed(int index){
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 800019c:	4a09      	ldr	r2, [pc, #36]	; (80001c4 <isButtonPressed+0x30>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	d106      	bne.n	80001b6 <isButtonPressed+0x22>
		button_flag[index] = 0;
 80001a8:	4a06      	ldr	r2, [pc, #24]	; (80001c4 <isButtonPressed+0x30>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2100      	movs	r1, #0
 80001ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e000      	b.n	80001b8 <isButtonPressed+0x24>
	}
	return 0;
 80001b6:	2300      	movs	r3, #0
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	370c      	adds	r7, #12
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	200000bc 	.word	0x200000bc

080001c8 <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(int index){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	//TODO
	//HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
	button_flag[index] = 1;
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <subKeyProcess+0x1c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	2101      	movs	r1, #1
 80001d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	200000bc 	.word	0x200000bc

080001e8 <getKeyInput>:

void getKeyInput(){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	readKey();
 80001ee:	f7ff ffad 	bl	800014c <readKey>
	for(int i = 0; i < NUM_OF_BUTTON; i++){
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e06e      	b.n	80002d6 <getKeyInput+0xee>
		KeyReg2[i] = KeyReg1[i];
 80001f8:	4a3b      	ldr	r2, [pc, #236]	; (80002e8 <getKeyInput+0x100>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	493a      	ldr	r1, [pc, #232]	; (80002ec <getKeyInput+0x104>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000208:	4a39      	ldr	r2, [pc, #228]	; (80002f0 <getKeyInput+0x108>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4935      	ldr	r1, [pc, #212]	; (80002e8 <getKeyInput+0x100>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = Key[i];
 8000218:	4a36      	ldr	r2, [pc, #216]	; (80002f4 <getKeyInput+0x10c>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4933      	ldr	r1, [pc, #204]	; (80002f0 <getKeyInput+0x108>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000228:	4a2f      	ldr	r2, [pc, #188]	; (80002e8 <getKeyInput+0x100>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	492f      	ldr	r1, [pc, #188]	; (80002f0 <getKeyInput+0x108>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000238:	429a      	cmp	r2, r3
 800023a:	d149      	bne.n	80002d0 <getKeyInput+0xe8>
 800023c:	4a2a      	ldr	r2, [pc, #168]	; (80002e8 <getKeyInput+0x100>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	4929      	ldr	r1, [pc, #164]	; (80002ec <getKeyInput+0x104>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024c:	429a      	cmp	r2, r3
 800024e:	d13f      	bne.n	80002d0 <getKeyInput+0xe8>
			if (KeyReg2[i] != KeyReg3[i]){
 8000250:	4a26      	ldr	r2, [pc, #152]	; (80002ec <getKeyInput+0x104>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000258:	4927      	ldr	r1, [pc, #156]	; (80002f8 <getKeyInput+0x110>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000260:	429a      	cmp	r2, r3
 8000262:	d017      	beq.n	8000294 <getKeyInput+0xac>
				KeyReg3[i] = KeyReg2[i];
 8000264:	4a21      	ldr	r2, [pc, #132]	; (80002ec <getKeyInput+0x104>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026c:	4922      	ldr	r1, [pc, #136]	; (80002f8 <getKeyInput+0x110>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == PRESSED_STATE){
 8000274:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <getKeyInput+0x110>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d127      	bne.n	80002d0 <getKeyInput+0xe8>
				TimeOutForKeyPress[i] = 500;
 8000280:	4a1e      	ldr	r2, [pc, #120]	; (80002fc <getKeyInput+0x114>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				subKeyProcess(i);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f7ff ff9b 	bl	80001c8 <subKeyProcess>
 8000292:	e01d      	b.n	80002d0 <getKeyInput+0xe8>
				}
			}
			else{
				TimeOutForKeyPress[i] --;
 8000294:	4a19      	ldr	r2, [pc, #100]	; (80002fc <getKeyInput+0x114>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	1e5a      	subs	r2, r3, #1
 800029e:	4917      	ldr	r1, [pc, #92]	; (80002fc <getKeyInput+0x114>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80002a6:	4a15      	ldr	r2, [pc, #84]	; (80002fc <getKeyInput+0x114>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d10e      	bne.n	80002d0 <getKeyInput+0xe8>
					TimeOutForKeyPress[i] = 500;
 80002b2:	4a12      	ldr	r2, [pc, #72]	; (80002fc <getKeyInput+0x114>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80002ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (KeyReg3[i] == PRESSED_STATE){
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <getKeyInput+0x110>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d102      	bne.n	80002d0 <getKeyInput+0xe8>
						subKeyProcess(i);
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f7ff ff7c 	bl	80001c8 <subKeyProcess>
	for(int i = 0; i < NUM_OF_BUTTON; i++){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2b03      	cmp	r3, #3
 80002da:	dd8d      	ble.n	80001f8 <getKeyInput+0x10>
					}
				}
			}
		}
	}
}
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000010 	.word	0x20000010
 80002ec:	20000020 	.word	0x20000020
 80002f0:	20000000 	.word	0x20000000
 80002f4:	20000040 	.word	0x20000040
 80002f8:	20000030 	.word	0x20000030
 80002fc:	20000050 	.word	0x20000050

08000300 <counter>:
 */

#include "fsm_automatic.h"
#include "global.h"

void counter(){
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
		led_count[0]--;
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <counter+0x20>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3b01      	subs	r3, #1
 800030a:	4a05      	ldr	r2, [pc, #20]	; (8000320 <counter+0x20>)
 800030c:	6013      	str	r3, [r2, #0]
		led_count[1]--;
 800030e:	4b04      	ldr	r3, [pc, #16]	; (8000320 <counter+0x20>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	4a02      	ldr	r2, [pc, #8]	; (8000320 <counter+0x20>)
 8000316:	6053      	str	r3, [r2, #4]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	2000007c 	.word	0x2000007c

08000324 <fsm_automatic_run>:
void fsm_automatic_run(){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	switch(status){
 8000328:	4b89      	ldr	r3, [pc, #548]	; (8000550 <fsm_automatic_run+0x22c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b04      	cmp	r3, #4
 800032e:	f200 8103 	bhi.w	8000538 <fsm_automatic_run+0x214>
 8000332:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <fsm_automatic_run+0x14>)
 8000334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000338:	0800034d 	.word	0x0800034d
 800033c:	08000355 	.word	0x08000355
 8000340:	080003cb 	.word	0x080003cb
 8000344:	08000449 	.word	0x08000449
 8000348:	080004bd 	.word	0x080004bd
		case INIT:
			status = AUTO_RED_GREEN;
 800034c:	4b80      	ldr	r3, [pc, #512]	; (8000550 <fsm_automatic_run+0x22c>)
 800034e:	2201      	movs	r2, #1
 8000350:	601a      	str	r2, [r3, #0]
			//time automatic
			break;
 8000352:	e0fa      	b.n	800054a <fsm_automatic_run+0x226>
		case AUTO_RED_GREEN:
			traffic_automatic();
 8000354:	f000 fb04 	bl	8000960 <traffic_automatic>
			updateBuffer(led_count[1], led_count[0]);
 8000358:	4b7e      	ldr	r3, [pc, #504]	; (8000554 <fsm_automatic_run+0x230>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	4a7d      	ldr	r2, [pc, #500]	; (8000554 <fsm_automatic_run+0x230>)
 800035e:	6812      	ldr	r2, [r2, #0]
 8000360:	4611      	mov	r1, r2
 8000362:	4618      	mov	r0, r3
 8000364:	f000 fc6e 	bl	8000c44 <updateBuffer>
			counter();
 8000368:	f7ff ffca 	bl	8000300 <counter>
			if(isButtonPressed(1)){
 800036c:	2001      	movs	r0, #1
 800036e:	f7ff ff11 	bl	8000194 <isButtonPressed>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d01b      	beq.n	80003b0 <fsm_automatic_run+0x8c>
				status = MODE_2;
 8000378:	4b75      	ldr	r3, [pc, #468]	; (8000550 <fsm_automatic_run+0x22c>)
 800037a:	220d      	movs	r2, #13
 800037c:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800037e:	f000 fa4d 	bl	800081c <clearAllLed>
				updateBuffer(MODE_2 - 11, count[0]);
 8000382:	4b75      	ldr	r3, [pc, #468]	; (8000558 <fsm_automatic_run+0x234>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4619      	mov	r1, r3
 8000388:	2002      	movs	r0, #2
 800038a:	f000 fc5b 	bl	8000c44 <updateBuffer>
				SCH_Add_Task(fsm_manual_run, 0, 500, 2);
 800038e:	2302      	movs	r3, #2
 8000390:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000394:	2100      	movs	r1, #0
 8000396:	4871      	ldr	r0, [pc, #452]	; (800055c <fsm_automatic_run+0x238>)
 8000398:	f000 fd8c 	bl	8000eb4 <SCH_Add_Task>
				SCH_Add_Task(toggleLed, 0, 500, 6);
 800039c:	2306      	movs	r3, #6
 800039e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003a2:	2100      	movs	r1, #0
 80003a4:	486e      	ldr	r0, [pc, #440]	; (8000560 <fsm_automatic_run+0x23c>)
 80003a6:	f000 fd85 	bl	8000eb4 <SCH_Add_Task>
				SCH_Delete_Task(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f000 feda 	bl	8001164 <SCH_Delete_Task>
			}
			if(led_count[1] == 0){
 80003b0:	4b68      	ldr	r3, [pc, #416]	; (8000554 <fsm_automatic_run+0x230>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	f040 80c1 	bne.w	800053c <fsm_automatic_run+0x218>
				status = AUTO_RED_YELLOW;
 80003ba:	4b65      	ldr	r3, [pc, #404]	; (8000550 <fsm_automatic_run+0x22c>)
 80003bc:	2202      	movs	r2, #2
 80003be:	601a      	str	r2, [r3, #0]
				led_count[1] = count[1];
 80003c0:	4b65      	ldr	r3, [pc, #404]	; (8000558 <fsm_automatic_run+0x234>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	4a63      	ldr	r2, [pc, #396]	; (8000554 <fsm_automatic_run+0x230>)
 80003c6:	6053      	str	r3, [r2, #4]
			}
			break;
 80003c8:	e0b8      	b.n	800053c <fsm_automatic_run+0x218>
		case AUTO_RED_YELLOW:
			traffic_automatic();
 80003ca:	f000 fac9 	bl	8000960 <traffic_automatic>
			updateBuffer(led_count[1], led_count[0]);
 80003ce:	4b61      	ldr	r3, [pc, #388]	; (8000554 <fsm_automatic_run+0x230>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	4a60      	ldr	r2, [pc, #384]	; (8000554 <fsm_automatic_run+0x230>)
 80003d4:	6812      	ldr	r2, [r2, #0]
 80003d6:	4611      	mov	r1, r2
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fc33 	bl	8000c44 <updateBuffer>
			counter();
 80003de:	f7ff ff8f 	bl	8000300 <counter>
			if(isButtonPressed(1)){
 80003e2:	2001      	movs	r0, #1
 80003e4:	f7ff fed6 	bl	8000194 <isButtonPressed>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d01b      	beq.n	8000426 <fsm_automatic_run+0x102>
				status = MODE_2;
 80003ee:	4b58      	ldr	r3, [pc, #352]	; (8000550 <fsm_automatic_run+0x22c>)
 80003f0:	220d      	movs	r2, #13
 80003f2:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80003f4:	f000 fa12 	bl	800081c <clearAllLed>
				updateBuffer(MODE_2 - 11, count[0]);
 80003f8:	4b57      	ldr	r3, [pc, #348]	; (8000558 <fsm_automatic_run+0x234>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4619      	mov	r1, r3
 80003fe:	2002      	movs	r0, #2
 8000400:	f000 fc20 	bl	8000c44 <updateBuffer>
				SCH_Add_Task(fsm_manual_run, 0, 500, 2);
 8000404:	2302      	movs	r3, #2
 8000406:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800040a:	2100      	movs	r1, #0
 800040c:	4853      	ldr	r0, [pc, #332]	; (800055c <fsm_automatic_run+0x238>)
 800040e:	f000 fd51 	bl	8000eb4 <SCH_Add_Task>
				SCH_Add_Task(toggleLed, 0, 500, 6);
 8000412:	2306      	movs	r3, #6
 8000414:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000418:	2100      	movs	r1, #0
 800041a:	4851      	ldr	r0, [pc, #324]	; (8000560 <fsm_automatic_run+0x23c>)
 800041c:	f000 fd4a 	bl	8000eb4 <SCH_Add_Task>
				SCH_Delete_Task(1);
 8000420:	2001      	movs	r0, #1
 8000422:	f000 fe9f 	bl	8001164 <SCH_Delete_Task>
			}
			if(led_count[0] == 0){
 8000426:	4b4b      	ldr	r3, [pc, #300]	; (8000554 <fsm_automatic_run+0x230>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8088 	bne.w	8000540 <fsm_automatic_run+0x21c>
				status = AUTO_GREEN_RED;
 8000430:	4b47      	ldr	r3, [pc, #284]	; (8000550 <fsm_automatic_run+0x22c>)
 8000432:	2203      	movs	r2, #3
 8000434:	601a      	str	r2, [r3, #0]
				led_count[0] = count[2];
 8000436:	4b48      	ldr	r3, [pc, #288]	; (8000558 <fsm_automatic_run+0x234>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	4a46      	ldr	r2, [pc, #280]	; (8000554 <fsm_automatic_run+0x230>)
 800043c:	6013      	str	r3, [r2, #0]
				led_count[1] = count[0];
 800043e:	4b46      	ldr	r3, [pc, #280]	; (8000558 <fsm_automatic_run+0x234>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a44      	ldr	r2, [pc, #272]	; (8000554 <fsm_automatic_run+0x230>)
 8000444:	6053      	str	r3, [r2, #4]
			}
			break;
 8000446:	e07b      	b.n	8000540 <fsm_automatic_run+0x21c>
		case AUTO_GREEN_RED:
			traffic_automatic();
 8000448:	f000 fa8a 	bl	8000960 <traffic_automatic>
			updateBuffer(led_count[1], led_count[0]);
 800044c:	4b41      	ldr	r3, [pc, #260]	; (8000554 <fsm_automatic_run+0x230>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	4a40      	ldr	r2, [pc, #256]	; (8000554 <fsm_automatic_run+0x230>)
 8000452:	6812      	ldr	r2, [r2, #0]
 8000454:	4611      	mov	r1, r2
 8000456:	4618      	mov	r0, r3
 8000458:	f000 fbf4 	bl	8000c44 <updateBuffer>
			counter();
 800045c:	f7ff ff50 	bl	8000300 <counter>
			if(isButtonPressed(1)){
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff fe97 	bl	8000194 <isButtonPressed>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d01b      	beq.n	80004a4 <fsm_automatic_run+0x180>
				status = MODE_2;
 800046c:	4b38      	ldr	r3, [pc, #224]	; (8000550 <fsm_automatic_run+0x22c>)
 800046e:	220d      	movs	r2, #13
 8000470:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000472:	f000 f9d3 	bl	800081c <clearAllLed>
				updateBuffer(MODE_2 - 11, count[0]);
 8000476:	4b38      	ldr	r3, [pc, #224]	; (8000558 <fsm_automatic_run+0x234>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4619      	mov	r1, r3
 800047c:	2002      	movs	r0, #2
 800047e:	f000 fbe1 	bl	8000c44 <updateBuffer>
				SCH_Add_Task(fsm_manual_run, 0, 500, 2);
 8000482:	2302      	movs	r3, #2
 8000484:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000488:	2100      	movs	r1, #0
 800048a:	4834      	ldr	r0, [pc, #208]	; (800055c <fsm_automatic_run+0x238>)
 800048c:	f000 fd12 	bl	8000eb4 <SCH_Add_Task>
				SCH_Add_Task(toggleLed, 0, 500, 6);
 8000490:	2306      	movs	r3, #6
 8000492:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000496:	2100      	movs	r1, #0
 8000498:	4831      	ldr	r0, [pc, #196]	; (8000560 <fsm_automatic_run+0x23c>)
 800049a:	f000 fd0b 	bl	8000eb4 <SCH_Add_Task>
				SCH_Delete_Task(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 fe60 	bl	8001164 <SCH_Delete_Task>
			}
			if(led_count[0] == 0){
 80004a4:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <fsm_automatic_run+0x230>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d14b      	bne.n	8000544 <fsm_automatic_run+0x220>
				status = AUTO_YELLOW_RED;
 80004ac:	4b28      	ldr	r3, [pc, #160]	; (8000550 <fsm_automatic_run+0x22c>)
 80004ae:	2204      	movs	r2, #4
 80004b0:	601a      	str	r2, [r3, #0]
				led_count[0] = count[1];
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <fsm_automatic_run+0x234>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	4a27      	ldr	r2, [pc, #156]	; (8000554 <fsm_automatic_run+0x230>)
 80004b8:	6013      	str	r3, [r2, #0]
			}
			break;
 80004ba:	e043      	b.n	8000544 <fsm_automatic_run+0x220>
		case AUTO_YELLOW_RED:
			traffic_automatic();
 80004bc:	f000 fa50 	bl	8000960 <traffic_automatic>
			updateBuffer(led_count[1], led_count[0]);
 80004c0:	4b24      	ldr	r3, [pc, #144]	; (8000554 <fsm_automatic_run+0x230>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	4a23      	ldr	r2, [pc, #140]	; (8000554 <fsm_automatic_run+0x230>)
 80004c6:	6812      	ldr	r2, [r2, #0]
 80004c8:	4611      	mov	r1, r2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fbba 	bl	8000c44 <updateBuffer>
			counter();
 80004d0:	f7ff ff16 	bl	8000300 <counter>
			if(isButtonPressed(1)){
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff fe5d 	bl	8000194 <isButtonPressed>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d01b      	beq.n	8000518 <fsm_automatic_run+0x1f4>
				status = MODE_2;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <fsm_automatic_run+0x22c>)
 80004e2:	220d      	movs	r2, #13
 80004e4:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80004e6:	f000 f999 	bl	800081c <clearAllLed>
				updateBuffer(MODE_2 - 11, count[0]);
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <fsm_automatic_run+0x234>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4619      	mov	r1, r3
 80004f0:	2002      	movs	r0, #2
 80004f2:	f000 fba7 	bl	8000c44 <updateBuffer>
				SCH_Add_Task(fsm_manual_run, 0, 500, 2);
 80004f6:	2302      	movs	r3, #2
 80004f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004fc:	2100      	movs	r1, #0
 80004fe:	4817      	ldr	r0, [pc, #92]	; (800055c <fsm_automatic_run+0x238>)
 8000500:	f000 fcd8 	bl	8000eb4 <SCH_Add_Task>
				SCH_Add_Task(toggleLed, 0, 500, 6);
 8000504:	2306      	movs	r3, #6
 8000506:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800050a:	2100      	movs	r1, #0
 800050c:	4814      	ldr	r0, [pc, #80]	; (8000560 <fsm_automatic_run+0x23c>)
 800050e:	f000 fcd1 	bl	8000eb4 <SCH_Add_Task>
				SCH_Delete_Task(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f000 fe26 	bl	8001164 <SCH_Delete_Task>
			}
			if(led_count[0] == 0){
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <fsm_automatic_run+0x230>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d113      	bne.n	8000548 <fsm_automatic_run+0x224>
				status = AUTO_RED_GREEN;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <fsm_automatic_run+0x22c>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
				led_count[0] = count[0];
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <fsm_automatic_run+0x234>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <fsm_automatic_run+0x230>)
 800052c:	6013      	str	r3, [r2, #0]
				led_count[1] = count[2];
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <fsm_automatic_run+0x234>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	4a08      	ldr	r2, [pc, #32]	; (8000554 <fsm_automatic_run+0x230>)
 8000534:	6053      	str	r3, [r2, #4]
			}
			break;
 8000536:	e007      	b.n	8000548 <fsm_automatic_run+0x224>
		default:
			break;
 8000538:	bf00      	nop
 800053a:	e006      	b.n	800054a <fsm_automatic_run+0x226>
			break;
 800053c:	bf00      	nop
 800053e:	e004      	b.n	800054a <fsm_automatic_run+0x226>
			break;
 8000540:	bf00      	nop
 8000542:	e002      	b.n	800054a <fsm_automatic_run+0x226>
			break;
 8000544:	bf00      	nop
 8000546:	e000      	b.n	800054a <fsm_automatic_run+0x226>
			break;
 8000548:	bf00      	nop
		  }
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000060 	.word	0x20000060
 8000554:	2000007c 	.word	0x2000007c
 8000558:	20000064 	.word	0x20000064
 800055c:	08000689 	.word	0x08000689
 8000560:	08000641 	.word	0x08000641

08000564 <toAutomatic>:
 *      Author: PC
 */

#include "fsm_manual.h"

void toAutomatic(){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
		status = AUTO_RED_GREEN;
 8000568:	4b30      	ldr	r3, [pc, #192]	; (800062c <toAutomatic+0xc8>)
 800056a:	2201      	movs	r2, #1
 800056c:	601a      	str	r2, [r3, #0]
		clearAllLed();
 800056e:	f000 f955 	bl	800081c <clearAllLed>
		while(temp_count[0] != temp_count[1] + temp_count[2]){
 8000572:	e02e      	b.n	80005d2 <toAutomatic+0x6e>
			if(temp_count[1] > temp_count[0] || temp_count[2] > temp_count[0]){
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <toAutomatic+0xcc>)
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <toAutomatic+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	dc05      	bgt.n	800058c <toAutomatic+0x28>
 8000580:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <toAutomatic+0xcc>)
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <toAutomatic+0xcc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	429a      	cmp	r2, r3
 800058a:	dd0a      	ble.n	80005a2 <toAutomatic+0x3e>
				temp_count[1] = 3;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <toAutomatic+0xcc>)
 800058e:	2203      	movs	r2, #3
 8000590:	605a      	str	r2, [r3, #4]
				temp_count[0] = temp_count[1] + temp_count[2];
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <toAutomatic+0xcc>)
 8000594:	685a      	ldr	r2, [r3, #4]
 8000596:	4b26      	ldr	r3, [pc, #152]	; (8000630 <toAutomatic+0xcc>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	4413      	add	r3, r2
 800059c:	4a24      	ldr	r2, [pc, #144]	; (8000630 <toAutomatic+0xcc>)
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	e017      	b.n	80005d2 <toAutomatic+0x6e>
			}
			else if(temp_count[1] > temp_count[2]){
 80005a2:	4b23      	ldr	r3, [pc, #140]	; (8000630 <toAutomatic+0xcc>)
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <toAutomatic+0xcc>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	dd0a      	ble.n	80005c4 <toAutomatic+0x60>
				temp_count[1] = 3;
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <toAutomatic+0xcc>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	605a      	str	r2, [r3, #4]
				temp_count[2] = temp_count[0] - temp_count[1];
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <toAutomatic+0xcc>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <toAutomatic+0xcc>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <toAutomatic+0xcc>)
 80005c0:	6093      	str	r3, [r2, #8]
 80005c2:	e006      	b.n	80005d2 <toAutomatic+0x6e>
			}
			else {
				temp_count[2] = temp_count[0] - temp_count[1];
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <toAutomatic+0xcc>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <toAutomatic+0xcc>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <toAutomatic+0xcc>)
 80005d0:	6093      	str	r3, [r2, #8]
		while(temp_count[0] != temp_count[1] + temp_count[2]){
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <toAutomatic+0xcc>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <toAutomatic+0xcc>)
 80005d8:	6859      	ldr	r1, [r3, #4]
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <toAutomatic+0xcc>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	440b      	add	r3, r1
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d1c7      	bne.n	8000574 <toAutomatic+0x10>
			}
		}
		count[0] = temp_count[0];
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <toAutomatic+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <toAutomatic+0xd0>)
 80005ea:	6013      	str	r3, [r2, #0]
		count[1] = temp_count[1];
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <toAutomatic+0xcc>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a10      	ldr	r2, [pc, #64]	; (8000634 <toAutomatic+0xd0>)
 80005f2:	6053      	str	r3, [r2, #4]
		count[2] = temp_count[2];
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <toAutomatic+0xcc>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <toAutomatic+0xd0>)
 80005fa:	6093      	str	r3, [r2, #8]
		led_count[0] = count[0];
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <toAutomatic+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <toAutomatic+0xd4>)
 8000602:	6013      	str	r3, [r2, #0]
		led_count[1] = count[2];
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <toAutomatic+0xd0>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	4a0b      	ldr	r2, [pc, #44]	; (8000638 <toAutomatic+0xd4>)
 800060a:	6053      	str	r3, [r2, #4]
		SCH_Delete_Task(2); // turn off manual mode
 800060c:	2002      	movs	r0, #2
 800060e:	f000 fda9 	bl	8001164 <SCH_Delete_Task>
		SCH_Delete_Task(6); // turn off toggle
 8000612:	2006      	movs	r0, #6
 8000614:	f000 fda6 	bl	8001164 <SCH_Delete_Task>
		SCH_Add_Task(fsm_automatic_run, 0, 1000, 1);
 8000618:	2301      	movs	r3, #1
 800061a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061e:	2100      	movs	r1, #0
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <toAutomatic+0xd8>)
 8000622:	f000 fc47 	bl	8000eb4 <SCH_Add_Task>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000060 	.word	0x20000060
 8000630:	20000070 	.word	0x20000070
 8000634:	20000064 	.word	0x20000064
 8000638:	2000007c 	.word	0x2000007c
 800063c:	08000325 	.word	0x08000325

08000640 <toggleLed>:
void toggleLed(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	switch(status){
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <toggleLed+0x40>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d010      	beq.n	800066e <toggleLed+0x2e>
 800064c:	2b0f      	cmp	r3, #15
 800064e:	dc13      	bgt.n	8000678 <toggleLed+0x38>
 8000650:	2b0d      	cmp	r3, #13
 8000652:	d002      	beq.n	800065a <toggleLed+0x1a>
 8000654:	2b0e      	cmp	r3, #14
 8000656:	d005      	beq.n	8000664 <toggleLed+0x24>
			break;
		case MODE_4:
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin | LED5_Pin);
			break;
		default:
			break;
 8000658:	e00e      	b.n	8000678 <toggleLed+0x38>
			HAL_GPIO_TogglePin(GPIOB, LED1_Pin | LED4_Pin);
 800065a:	2109      	movs	r1, #9
 800065c:	4809      	ldr	r0, [pc, #36]	; (8000684 <toggleLed+0x44>)
 800065e:	f001 f9ca 	bl	80019f6 <HAL_GPIO_TogglePin>
			break;
 8000662:	e00a      	b.n	800067a <toggleLed+0x3a>
			HAL_GPIO_TogglePin(GPIOB, LED3_Pin | LED6_Pin);
 8000664:	2124      	movs	r1, #36	; 0x24
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <toggleLed+0x44>)
 8000668:	f001 f9c5 	bl	80019f6 <HAL_GPIO_TogglePin>
			break;
 800066c:	e005      	b.n	800067a <toggleLed+0x3a>
			HAL_GPIO_TogglePin(GPIOB, LED2_Pin | LED5_Pin);
 800066e:	2112      	movs	r1, #18
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <toggleLed+0x44>)
 8000672:	f001 f9c0 	bl	80019f6 <HAL_GPIO_TogglePin>
			break;
 8000676:	e000      	b.n	800067a <toggleLed+0x3a>
			break;
 8000678:	bf00      	nop
	}
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000060 	.word	0x20000060
 8000684:	40010c00 	.word	0x40010c00

08000688 <fsm_manual_run>:
void fsm_manual_run(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	switch(status){
 800068c:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <fsm_manual_run+0x170>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d07b      	beq.n	800078c <fsm_manual_run+0x104>
 8000694:	2b0f      	cmp	r3, #15
 8000696:	f300 80a6 	bgt.w	80007e6 <fsm_manual_run+0x15e>
 800069a:	2b0d      	cmp	r3, #13
 800069c:	d002      	beq.n	80006a4 <fsm_manual_run+0x1c>
 800069e:	2b0e      	cmp	r3, #14
 80006a0:	d03a      	beq.n	8000718 <fsm_manual_run+0x90>
			else if(isButtonPressed(3)){
				count[2] = temp_count[2];
			}
			break;
		default:
			break;
 80006a2:	e0a0      	b.n	80007e6 <fsm_manual_run+0x15e>
			if(isButtonPressed(1)){
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff fd75 	bl	8000194 <isButtonPressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00f      	beq.n	80006d0 <fsm_manual_run+0x48>
				status = MODE_3;
 80006b0:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <fsm_manual_run+0x170>)
 80006b2:	220e      	movs	r2, #14
 80006b4:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80006b6:	f000 f8b1 	bl	800081c <clearAllLed>
				updateBuffer(MODE_3 - 11, temp_count[1]);
 80006ba:	4b50      	ldr	r3, [pc, #320]	; (80007fc <fsm_manual_run+0x174>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 fabf 	bl	8000c44 <updateBuffer>
				count[0] = temp_count[0];
 80006c6:	4b4d      	ldr	r3, [pc, #308]	; (80007fc <fsm_manual_run+0x174>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a4d      	ldr	r2, [pc, #308]	; (8000800 <fsm_manual_run+0x178>)
 80006cc:	6013      	str	r3, [r2, #0]
			break;
 80006ce:	e08c      	b.n	80007ea <fsm_manual_run+0x162>
			else if(isButtonPressed(2)){
 80006d0:	2002      	movs	r0, #2
 80006d2:	f7ff fd5f 	bl	8000194 <isButtonPressed>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d012      	beq.n	8000702 <fsm_manual_run+0x7a>
				temp_count[0]++;
 80006dc:	4b47      	ldr	r3, [pc, #284]	; (80007fc <fsm_manual_run+0x174>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a46      	ldr	r2, [pc, #280]	; (80007fc <fsm_manual_run+0x174>)
 80006e4:	6013      	str	r3, [r2, #0]
				if(temp_count[0] > 99)
 80006e6:	4b45      	ldr	r3, [pc, #276]	; (80007fc <fsm_manual_run+0x174>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b63      	cmp	r3, #99	; 0x63
 80006ec:	dd02      	ble.n	80006f4 <fsm_manual_run+0x6c>
					temp_count[0] = 1;
 80006ee:	4b43      	ldr	r3, [pc, #268]	; (80007fc <fsm_manual_run+0x174>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
				updateBuffer(MODE_2 - 11, temp_count[0]);
 80006f4:	4b41      	ldr	r3, [pc, #260]	; (80007fc <fsm_manual_run+0x174>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2002      	movs	r0, #2
 80006fc:	f000 faa2 	bl	8000c44 <updateBuffer>
			break;
 8000700:	e073      	b.n	80007ea <fsm_manual_run+0x162>
			else if(isButtonPressed(3)){
 8000702:	2003      	movs	r0, #3
 8000704:	f7ff fd46 	bl	8000194 <isButtonPressed>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d06d      	beq.n	80007ea <fsm_manual_run+0x162>
				count[0] = temp_count[0];
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <fsm_manual_run+0x174>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a3b      	ldr	r2, [pc, #236]	; (8000800 <fsm_manual_run+0x178>)
 8000714:	6013      	str	r3, [r2, #0]
			break;
 8000716:	e068      	b.n	80007ea <fsm_manual_run+0x162>
			if(isButtonPressed(1)){
 8000718:	2001      	movs	r0, #1
 800071a:	f7ff fd3b 	bl	8000194 <isButtonPressed>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00f      	beq.n	8000744 <fsm_manual_run+0xbc>
				status = MODE_4;
 8000724:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <fsm_manual_run+0x170>)
 8000726:	220f      	movs	r2, #15
 8000728:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800072a:	f000 f877 	bl	800081c <clearAllLed>
				updateBuffer(MODE_4 - 11, temp_count[2]);
 800072e:	4b33      	ldr	r3, [pc, #204]	; (80007fc <fsm_manual_run+0x174>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4619      	mov	r1, r3
 8000734:	2004      	movs	r0, #4
 8000736:	f000 fa85 	bl	8000c44 <updateBuffer>
				count[1] = temp_count[1];
 800073a:	4b30      	ldr	r3, [pc, #192]	; (80007fc <fsm_manual_run+0x174>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4a30      	ldr	r2, [pc, #192]	; (8000800 <fsm_manual_run+0x178>)
 8000740:	6053      	str	r3, [r2, #4]
			break;
 8000742:	e054      	b.n	80007ee <fsm_manual_run+0x166>
			else if(isButtonPressed(2)){
 8000744:	2002      	movs	r0, #2
 8000746:	f7ff fd25 	bl	8000194 <isButtonPressed>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d012      	beq.n	8000776 <fsm_manual_run+0xee>
				temp_count[1]++;
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <fsm_manual_run+0x174>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	3301      	adds	r3, #1
 8000756:	4a29      	ldr	r2, [pc, #164]	; (80007fc <fsm_manual_run+0x174>)
 8000758:	6053      	str	r3, [r2, #4]
				if(temp_count[1] > 99)
 800075a:	4b28      	ldr	r3, [pc, #160]	; (80007fc <fsm_manual_run+0x174>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	2b63      	cmp	r3, #99	; 0x63
 8000760:	dd02      	ble.n	8000768 <fsm_manual_run+0xe0>
					temp_count[1] = 1;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <fsm_manual_run+0x174>)
 8000764:	2201      	movs	r2, #1
 8000766:	605a      	str	r2, [r3, #4]
				updateBuffer(MODE_3 - 11, temp_count[1]);
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <fsm_manual_run+0x174>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	4619      	mov	r1, r3
 800076e:	2003      	movs	r0, #3
 8000770:	f000 fa68 	bl	8000c44 <updateBuffer>
			break;
 8000774:	e03b      	b.n	80007ee <fsm_manual_run+0x166>
			else if(isButtonPressed(3)){
 8000776:	2003      	movs	r0, #3
 8000778:	f7ff fd0c 	bl	8000194 <isButtonPressed>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d035      	beq.n	80007ee <fsm_manual_run+0x166>
				count[1] = temp_count[1];
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <fsm_manual_run+0x174>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <fsm_manual_run+0x178>)
 8000788:	6053      	str	r3, [r2, #4]
			break;
 800078a:	e030      	b.n	80007ee <fsm_manual_run+0x166>
			if(isButtonPressed(1)){
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff fd01 	bl	8000194 <isButtonPressed>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <fsm_manual_run+0x116>
				toAutomatic();//so sanh dieu kien va cap nhat gia tri
 8000798:	f7ff fee4 	bl	8000564 <toAutomatic>
			break;
 800079c:	e029      	b.n	80007f2 <fsm_manual_run+0x16a>
			else if(isButtonPressed(2)){
 800079e:	2002      	movs	r0, #2
 80007a0:	f7ff fcf8 	bl	8000194 <isButtonPressed>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d012      	beq.n	80007d0 <fsm_manual_run+0x148>
				temp_count[2]++;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <fsm_manual_run+0x174>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <fsm_manual_run+0x174>)
 80007b2:	6093      	str	r3, [r2, #8]
				if(temp_count[2] > 99)
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <fsm_manual_run+0x174>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2b63      	cmp	r3, #99	; 0x63
 80007ba:	dd02      	ble.n	80007c2 <fsm_manual_run+0x13a>
					temp_count[2] = 1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <fsm_manual_run+0x174>)
 80007be:	2201      	movs	r2, #1
 80007c0:	609a      	str	r2, [r3, #8]
				updateBuffer(MODE_4 - 11, temp_count[2]);
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <fsm_manual_run+0x174>)
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	4619      	mov	r1, r3
 80007c8:	2004      	movs	r0, #4
 80007ca:	f000 fa3b 	bl	8000c44 <updateBuffer>
			break;
 80007ce:	e010      	b.n	80007f2 <fsm_manual_run+0x16a>
			else if(isButtonPressed(3)){
 80007d0:	2003      	movs	r0, #3
 80007d2:	f7ff fcdf 	bl	8000194 <isButtonPressed>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d00a      	beq.n	80007f2 <fsm_manual_run+0x16a>
				count[2] = temp_count[2];
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <fsm_manual_run+0x174>)
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <fsm_manual_run+0x178>)
 80007e2:	6093      	str	r3, [r2, #8]
			break;
 80007e4:	e005      	b.n	80007f2 <fsm_manual_run+0x16a>
			break;
 80007e6:	bf00      	nop
 80007e8:	e004      	b.n	80007f4 <fsm_manual_run+0x16c>
			break;
 80007ea:	bf00      	nop
 80007ec:	e002      	b.n	80007f4 <fsm_manual_run+0x16c>
			break;
 80007ee:	bf00      	nop
 80007f0:	e000      	b.n	80007f4 <fsm_manual_run+0x16c>
			break;
 80007f2:	bf00      	nop
	}
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000060 	.word	0x20000060
 80007fc:	20000070 	.word	0x20000070
 8000800:	20000064 	.word	0x20000064

08000804 <blinky>:
int led_count[2] = {5, 3};
const uint8_t MAX_LED = 4;
uint8_t index_led = 0;
int led_buffer[4] = {3, 2, 5, 5};

void blinky(){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <blinky+0x14>)
 800080e:	f001 f8f2 	bl	80019f6 <HAL_GPIO_TogglePin>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40010800 	.word	0x40010800

0800081c <clearAllLed>:
 */

#include "led_traffic.h"


void clearAllLed(){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin
 8000820:	2200      	movs	r2, #0
 8000822:	213f      	movs	r1, #63	; 0x3f
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <clearAllLed+0x14>)
 8000826:	f001 f8ce 	bl	80019c6 <HAL_GPIO_WritePin>
			| LED4_Pin | LED5_Pin | LED6_Pin, 0);
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010c00 	.word	0x40010c00

08000834 <red_on>:

//automatic
//red on top and bottom is 1
//red on left and right is 2
void red_on(int index){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	switch (index){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d003      	beq.n	800084a <red_on+0x16>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d010      	beq.n	800086a <red_on+0x36>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);

		break;
	default:
		break;
 8000848:	e01f      	b.n	800088a <red_on+0x56>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 800084a:	2201      	movs	r2, #1
 800084c:	2101      	movs	r1, #1
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <red_on+0x60>)
 8000850:	f001 f8b9 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2102      	movs	r1, #2
 8000858:	480e      	ldr	r0, [pc, #56]	; (8000894 <red_on+0x60>)
 800085a:	f001 f8b4 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2104      	movs	r1, #4
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <red_on+0x60>)
 8000864:	f001 f8af 	bl	80019c6 <HAL_GPIO_WritePin>
		break;
 8000868:	e00f      	b.n	800088a <red_on+0x56>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	2108      	movs	r1, #8
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <red_on+0x60>)
 8000870:	f001 f8a9 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2110      	movs	r1, #16
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <red_on+0x60>)
 800087a:	f001 f8a4 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <red_on+0x60>)
 8000884:	f001 f89f 	bl	80019c6 <HAL_GPIO_WritePin>
		break;
 8000888:	bf00      	nop
	}
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40010c00 	.word	0x40010c00

08000898 <green_on>:
//
void green_on(int index){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	switch (index){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d003      	beq.n	80008ae <green_on+0x16>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d010      	beq.n	80008ce <green_on+0x36>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
		break;
	default:
		break;
 80008ac:	e01f      	b.n	80008ee <green_on+0x56>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2101      	movs	r1, #1
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <green_on+0x60>)
 80008b4:	f001 f887 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2102      	movs	r1, #2
 80008bc:	480e      	ldr	r0, [pc, #56]	; (80008f8 <green_on+0x60>)
 80008be:	f001 f882 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2104      	movs	r1, #4
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <green_on+0x60>)
 80008c8:	f001 f87d 	bl	80019c6 <HAL_GPIO_WritePin>
		break;
 80008cc:	e00f      	b.n	80008ee <green_on+0x56>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <green_on+0x60>)
 80008d4:	f001 f877 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	2110      	movs	r1, #16
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <green_on+0x60>)
 80008de:	f001 f872 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4804      	ldr	r0, [pc, #16]	; (80008f8 <green_on+0x60>)
 80008e8:	f001 f86d 	bl	80019c6 <HAL_GPIO_WritePin>
		break;
 80008ec:	bf00      	nop
	}
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40010c00 	.word	0x40010c00

080008fc <yellow_on>:
//
void yellow_on(int index){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	switch (index){
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d003      	beq.n	8000912 <yellow_on+0x16>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b02      	cmp	r3, #2
 800090e:	d010      	beq.n	8000932 <yellow_on+0x36>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
		break;
	default:
		break;
 8000910:	e01f      	b.n	8000952 <yellow_on+0x56>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2101      	movs	r1, #1
 8000916:	4811      	ldr	r0, [pc, #68]	; (800095c <yellow_on+0x60>)
 8000918:	f001 f855 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2102      	movs	r1, #2
 8000920:	480e      	ldr	r0, [pc, #56]	; (800095c <yellow_on+0x60>)
 8000922:	f001 f850 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	2104      	movs	r1, #4
 800092a:	480c      	ldr	r0, [pc, #48]	; (800095c <yellow_on+0x60>)
 800092c:	f001 f84b 	bl	80019c6 <HAL_GPIO_WritePin>
		break;
 8000930:	e00f      	b.n	8000952 <yellow_on+0x56>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2108      	movs	r1, #8
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <yellow_on+0x60>)
 8000938:	f001 f845 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2110      	movs	r1, #16
 8000940:	4806      	ldr	r0, [pc, #24]	; (800095c <yellow_on+0x60>)
 8000942:	f001 f840 	bl	80019c6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, 1);
 8000946:	2201      	movs	r2, #1
 8000948:	2120      	movs	r1, #32
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <yellow_on+0x60>)
 800094c:	f001 f83b 	bl	80019c6 <HAL_GPIO_WritePin>
		break;
 8000950:	bf00      	nop
	}
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40010c00 	.word	0x40010c00

08000960 <traffic_automatic>:
void traffic_automatic(){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	switch(status){
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <traffic_automatic+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3b01      	subs	r3, #1
 800096a:	2b03      	cmp	r3, #3
 800096c:	d826      	bhi.n	80009bc <traffic_automatic+0x5c>
 800096e:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <traffic_automatic+0x14>)
 8000970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000974:	08000985 	.word	0x08000985
 8000978:	08000993 	.word	0x08000993
 800097c:	080009a1 	.word	0x080009a1
 8000980:	080009af 	.word	0x080009af
	case AUTO_RED_GREEN://led_red is horizontal, led_green is vertical
		red_on(1);
 8000984:	2001      	movs	r0, #1
 8000986:	f7ff ff55 	bl	8000834 <red_on>
		green_on(2);
 800098a:	2002      	movs	r0, #2
 800098c:	f7ff ff84 	bl	8000898 <green_on>
		break;
 8000990:	e015      	b.n	80009be <traffic_automatic+0x5e>
	case AUTO_RED_YELLOW:
		red_on(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff4e 	bl	8000834 <red_on>
		yellow_on(2);
 8000998:	2002      	movs	r0, #2
 800099a:	f7ff ffaf 	bl	80008fc <yellow_on>

		break;
 800099e:	e00e      	b.n	80009be <traffic_automatic+0x5e>
	case AUTO_GREEN_RED:
		green_on(1);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff ff79 	bl	8000898 <green_on>
		red_on(2);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f7ff ff44 	bl	8000834 <red_on>

		break;
 80009ac:	e007      	b.n	80009be <traffic_automatic+0x5e>
	case AUTO_YELLOW_RED:
		yellow_on(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff ffa4 	bl	80008fc <yellow_on>
		red_on(2);
 80009b4:	2002      	movs	r0, #2
 80009b6:	f7ff ff3d 	bl	8000834 <red_on>

		break;
 80009ba:	e000      	b.n	80009be <traffic_automatic+0x5e>
	default:
		break;
 80009bc:	bf00      	nop
	}
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000060 	.word	0x20000060

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 fcfa 	bl	80013c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  SCH_Init();
 80009d0:	f000 fa50 	bl	8000e74 <SCH_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d4:	f000 f82e 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80009d8:	f000 f868 	bl	8000aac <MX_TIM2_Init>
  MX_GPIO_Init();
 80009dc:	f000 f8b2 	bl	8000b44 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80009e0:	480f      	ldr	r0, [pc, #60]	; (8000a20 <main+0x58>)
 80009e2:	f001 fc4d 	bl	8002280 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(fsm_automatic_run, 0, 1000, 1);//time automatic
 80009e6:	2301      	movs	r3, #1
 80009e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009ec:	2100      	movs	r1, #0
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <main+0x5c>)
 80009f0:	f000 fa60 	bl	8000eb4 <SCH_Add_Task>
  //time manual
  SCH_Add_Task(scan7led, 10, 250, 3);//scan led 7 segment
 80009f4:	2303      	movs	r3, #3
 80009f6:	22fa      	movs	r2, #250	; 0xfa
 80009f8:	210a      	movs	r1, #10
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <main+0x60>)
 80009fc:	f000 fa5a 	bl	8000eb4 <SCH_Add_Task>
  SCH_Add_Task(blinky, 15, 500, 4);//toggle led0
 8000a00:	2304      	movs	r3, #4
 8000a02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a06:	210f      	movs	r1, #15
 8000a08:	4808      	ldr	r0, [pc, #32]	; (8000a2c <main+0x64>)
 8000a0a:	f000 fa53 	bl	8000eb4 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 10, 10, 5);
 8000a0e:	2305      	movs	r3, #5
 8000a10:	220a      	movs	r2, #10
 8000a12:	210a      	movs	r1, #10
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <main+0x68>)
 8000a16:	f000 fa4d 	bl	8000eb4 <SCH_Add_Task>
//  SCH_Add_Task(blinkyled3, 1000, 1500);
//  SCH_Add_Task(blinkyled4, 1500, 2000);

  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000a1a:	f000 fb35 	bl	8001088 <SCH_Dispatch_Tasks>
 8000a1e:	e7fc      	b.n	8000a1a <main+0x52>
 8000a20:	200000e8 	.word	0x200000e8
 8000a24:	08000325 	.word	0x08000325
 8000a28:	08000e5d 	.word	0x08000e5d
 8000a2c:	08000805 	.word	0x08000805
 8000a30:	080001e9 	.word	0x080001e9

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b090      	sub	sp, #64	; 0x40
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0318 	add.w	r3, r7, #24
 8000a3e:	2228      	movs	r2, #40	; 0x28
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 ffcc 	bl	80029e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 ffdc 	bl	8001a28 <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a76:	f000 f8df 	bl	8000c38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fa48 	bl	8001f28 <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f8cb 	bl	8000c38 <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3740      	adds	r7, #64	; 0x40
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac8:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ad2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ad6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ae0:	2209      	movs	r2, #9
 8000ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000af0:	4813      	ldr	r0, [pc, #76]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000af2:	f001 fb75 	bl	80021e0 <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000afc:	f000 f89c 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000b0e:	f001 fcf3 	bl	80024f8 <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b18:	f000 f88e 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_TIM2_Init+0x94>)
 8000b2a:	f001 fecb 	bl	80028c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f880 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000e8 	.word	0x200000e8

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b58:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a2d      	ldr	r2, [pc, #180]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a21      	ldr	r2, [pc, #132]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_GPIO_Init+0xd0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f643 71fc 	movw	r1, #16380	; 0x3ffc
 8000ba6:	481c      	ldr	r0, [pc, #112]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000ba8:	f000 ff0d 	bl	80019c6 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED0_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000bac:	2200      	movs	r2, #0
 8000bae:	213f      	movs	r1, #63	; 0x3f
 8000bb0:	481a      	ldr	r0, [pc, #104]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000bb2:	f000 ff08 	bl	80019c6 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000bb6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4815      	ldr	r0, [pc, #84]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000bcc:	f000 fd6a 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin LED0_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000bd0:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8000bd4:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED0_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4619      	mov	r1, r3
 8000be8:	480b      	ldr	r0, [pc, #44]	; (8000c18 <MX_GPIO_Init+0xd4>)
 8000bea:	f000 fd5b 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000bee:	233f      	movs	r3, #63	; 0x3f
 8000bf0:	613b      	str	r3, [r7, #16]
                          |LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0310 	add.w	r3, r7, #16
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000c06:	f000 fd4d 	bl	80016a4 <HAL_GPIO_Init>

}
 8000c0a:	bf00      	nop
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000

08000c24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000c2c:	f000 fa0e 	bl	800104c <SCH_Update>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <updateBuffer>:
 *  Created on: Oct 28, 2024
 *      Author: PC
 */
#include "scan7led.h"

void updateBuffer(int time1, int time2){
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	led_buffer[0]=time1/10;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <updateBuffer+0x70>)
 8000c52:	fb82 1203 	smull	r1, r2, r2, r3
 8000c56:	1092      	asrs	r2, r2, #2
 8000c58:	17db      	asrs	r3, r3, #31
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	4a16      	ldr	r2, [pc, #88]	; (8000cb8 <updateBuffer+0x74>)
 8000c5e:	6013      	str	r3, [r2, #0]
	led_buffer[1]=time1%10;
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <updateBuffer+0x70>)
 8000c64:	fb83 2301 	smull	r2, r3, r3, r1
 8000c68:	109a      	asrs	r2, r3, #2
 8000c6a:	17cb      	asrs	r3, r1, #31
 8000c6c:	1ad2      	subs	r2, r2, r3
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	1aca      	subs	r2, r1, r3
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <updateBuffer+0x74>)
 8000c7a:	605a      	str	r2, [r3, #4]
	led_buffer[2]=time2/10;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <updateBuffer+0x70>)
 8000c80:	fb82 1203 	smull	r1, r2, r2, r3
 8000c84:	1092      	asrs	r2, r2, #2
 8000c86:	17db      	asrs	r3, r3, #31
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <updateBuffer+0x74>)
 8000c8c:	6093      	str	r3, [r2, #8]
	led_buffer[3]=time2%10;
 8000c8e:	6839      	ldr	r1, [r7, #0]
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <updateBuffer+0x70>)
 8000c92:	fb83 2301 	smull	r2, r3, r3, r1
 8000c96:	109a      	asrs	r2, r3, #2
 8000c98:	17cb      	asrs	r3, r1, #31
 8000c9a:	1ad2      	subs	r2, r2, r3
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	1aca      	subs	r2, r1, r3
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <updateBuffer+0x74>)
 8000ca8:	60da      	str	r2, [r3, #12]
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	66666667 	.word	0x66666667
 8000cb8:	20000084 	.word	0x20000084

08000cbc <displayDigit>:
    0b01111000, // 7: Seg0, Seg1, Seg2
    0b00000000, // 8: Seg0, Seg1, Seg2, Seg3, Seg4, Seg5, Seg6
    0b00010000  // 9: Seg0, Seg1, Seg2, Seg3, Seg5, Seg6
};
// ham thuc hien led 7 doan
void displayDigit(uint8_t digit) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, (segDigits[digit] & 0x01) ? 1 : 0);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4a2e      	ldr	r2, [pc, #184]	; (8000d84 <displayDigit+0xc8>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	482c      	ldr	r0, [pc, #176]	; (8000d88 <displayDigit+0xcc>)
 8000cd8:	f000 fe75 	bl	80019c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, (segDigits[digit] & 0x02) ? 1 : 0);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	4a29      	ldr	r2, [pc, #164]	; (8000d84 <displayDigit+0xc8>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	105b      	asrs	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	2108      	movs	r1, #8
 8000cf0:	4825      	ldr	r0, [pc, #148]	; (8000d88 <displayDigit+0xcc>)
 8000cf2:	f000 fe68 	bl	80019c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, (segDigits[digit] & 0x04) ? 1 : 0);
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <displayDigit+0xc8>)
 8000cfa:	5cd3      	ldrb	r3, [r2, r3]
 8000cfc:	109b      	asrs	r3, r3, #2
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	2110      	movs	r1, #16
 8000d0a:	481f      	ldr	r0, [pc, #124]	; (8000d88 <displayDigit+0xcc>)
 8000d0c:	f000 fe5b 	bl	80019c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, (segDigits[digit] & 0x08) ? 1 : 0);
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <displayDigit+0xc8>)
 8000d14:	5cd3      	ldrb	r3, [r2, r3]
 8000d16:	10db      	asrs	r3, r3, #3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	2120      	movs	r1, #32
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <displayDigit+0xcc>)
 8000d26:	f000 fe4e 	bl	80019c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, (segDigits[digit] & 0x10) ? 1 : 0);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <displayDigit+0xc8>)
 8000d2e:	5cd3      	ldrb	r3, [r2, r3]
 8000d30:	111b      	asrs	r3, r3, #4
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	2140      	movs	r1, #64	; 0x40
 8000d3e:	4812      	ldr	r0, [pc, #72]	; (8000d88 <displayDigit+0xcc>)
 8000d40:	f000 fe41 	bl	80019c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, (segDigits[digit] & 0x20) ? 1 : 0);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <displayDigit+0xc8>)
 8000d48:	5cd3      	ldrb	r3, [r2, r3]
 8000d4a:	115b      	asrs	r3, r3, #5
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	461a      	mov	r2, r3
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <displayDigit+0xcc>)
 8000d5a:	f000 fe34 	bl	80019c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, (segDigits[digit] & 0x40) ? 1 : 0);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <displayDigit+0xc8>)
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	119b      	asrs	r3, r3, #6
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <displayDigit+0xcc>)
 8000d76:	f000 fe26 	bl	80019c6 <HAL_GPIO_WritePin>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	08002a0c 	.word	0x08002a0c
 8000d88:	40010800 	.word	0x40010800

08000d8c <update7SEG>:
void update7SEG(int index) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000d9a:	482c      	ldr	r0, [pc, #176]	; (8000e4c <update7SEG+0xc0>)
 8000d9c:	f000 fe13 	bl	80019c6 <HAL_GPIO_WritePin>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d83e      	bhi.n	8000e24 <update7SEG+0x98>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <update7SEG+0x20>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dd7 	.word	0x08000dd7
 8000db4:	08000df1 	.word	0x08000df1
 8000db8:	08000e0b 	.word	0x08000e0b
	switch (index) {
		case 0:
			//Display the first 7SEG with led_buffer [0]
			HAL_GPIO_WritePin(GPIOA, EN0_Pin, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	4822      	ldr	r0, [pc, #136]	; (8000e4c <update7SEG+0xc0>)
 8000dc4:	f000 fdff 	bl	80019c6 <HAL_GPIO_WritePin>
			displayDigit(led_buffer[0]);
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <update7SEG+0xc4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff74 	bl	8000cbc <displayDigit>
			break;
 8000dd4:	e027      	b.n	8000e26 <update7SEG+0x9a>
		case 1:
			//Display the second 7SEG with led_buffer [1]
			HAL_GPIO_WritePin(GPIOA, EN1_Pin, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ddc:	481b      	ldr	r0, [pc, #108]	; (8000e4c <update7SEG+0xc0>)
 8000dde:	f000 fdf2 	bl	80019c6 <HAL_GPIO_WritePin>
			displayDigit(led_buffer[1]);
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <update7SEG+0xc4>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff67 	bl	8000cbc <displayDigit>
			break;
 8000dee:	e01a      	b.n	8000e26 <update7SEG+0x9a>
		case 2:
			//Display the third 7SEG with led_buffer [2]
			HAL_GPIO_WritePin(GPIOA, EN2_Pin, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <update7SEG+0xc0>)
 8000df8:	f000 fde5 	bl	80019c6 <HAL_GPIO_WritePin>
			displayDigit(led_buffer[2]);
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <update7SEG+0xc4>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff5a 	bl	8000cbc <displayDigit>
			break;
 8000e08:	e00d      	b.n	8000e26 <update7SEG+0x9a>
		case 3:
			//Display the forth 7SEG with led_buffer [3]
			HAL_GPIO_WritePin(GPIOA, EN3_Pin, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e10:	480e      	ldr	r0, [pc, #56]	; (8000e4c <update7SEG+0xc0>)
 8000e12:	f000 fdd8 	bl	80019c6 <HAL_GPIO_WritePin>
			displayDigit(led_buffer[3]);
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <update7SEG+0xc4>)
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff4d 	bl	8000cbc <displayDigit>
			break;
 8000e22:	e000      	b.n	8000e26 <update7SEG+0x9a>
		default:
			break;
 8000e24:	bf00      	nop
	}

	index_led++;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <update7SEG+0xc8>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <update7SEG+0xc8>)
 8000e30:	701a      	strb	r2, [r3, #0]
	if(index_led >= MAX_LED){
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <update7SEG+0xc8>)
 8000e34:	781a      	ldrb	r2, [r3, #0]
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <update7SEG+0xcc>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d302      	bcc.n	8000e44 <update7SEG+0xb8>
		index_led = 0;
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <update7SEG+0xc8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
	}
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40010800 	.word	0x40010800
 8000e50:	20000084 	.word	0x20000084
 8000e54:	200000cc 	.word	0x200000cc
 8000e58:	08002a08 	.word	0x08002a08

08000e5c <scan7led>:
void scan7led(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	update7SEG(index_led);
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <scan7led+0x14>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff91 	bl	8000d8c <update7SEG>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000cc 	.word	0x200000cc

08000e74 <SCH_Init>:

sTasks SCH_tasks_G[SCH_MAX_TASKS];
uint8_t is_add[SCH_MAX_TASKS] = {0};
uint32_t numTask = 0;

void SCH_Init(void){ // checked
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < SCH_MAX_TASKS; i++){
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	e00a      	b.n	8000e96 <SCH_Init+0x22>
		SCH_Delete(i);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f932 	bl	80010ec <SCH_Delete>
		is_add[i] = 0;
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <SCH_Init+0x38>)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < SCH_MAX_TASKS; i++){
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	3301      	adds	r3, #1
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b13      	cmp	r3, #19
 8000e9a:	d9f1      	bls.n	8000e80 <SCH_Init+0xc>
	}
	numTask = 0;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SCH_Init+0x3c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000d0 	.word	0x200000d0
 8000eb0:	200000e4 	.word	0x200000e4

08000eb4 <SCH_Add_Task>:
// modifing
void  SCH_Add_Task(void (*pFunction)(), uint32_t DELAY,
						uint32_t PERIOD, uint32_t TaskID){
 8000eb4:	b4b0      	push	{r4, r5, r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]
	if(numTask >= SCH_MAX_TASKS) return;
 8000ec2:	4b5f      	ldr	r3, [pc, #380]	; (8001040 <SCH_Add_Task+0x18c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b13      	cmp	r3, #19
 8000ec8:	f200 80b4 	bhi.w	8001034 <SCH_Add_Task+0x180>

    uint32_t total = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    uint32_t i = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
    uint32_t newDelay = DELAY;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	617b      	str	r3, [r7, #20]

    // Kiểm tra vị trí để thêm tác vụ
    for(; i < numTask; i++){
 8000ed8:	e02b      	b.n	8000f32 <SCH_Add_Task+0x7e>
        if(SCH_tasks_G[i].pTask){
 8000eda:	495a      	ldr	r1, [pc, #360]	; (8001044 <SCH_Add_Task+0x190>)
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d01e      	beq.n	8000f2c <SCH_Add_Task+0x78>
        	total += SCH_tasks_G[i].Delay;
 8000eee:	4955      	ldr	r1, [pc, #340]	; (8001044 <SCH_Add_Task+0x190>)
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	3304      	adds	r3, #4
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	4413      	add	r3, r2
 8000f04:	61fb      	str	r3, [r7, #28]
        	if(total > newDelay){
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d90e      	bls.n	8000f2c <SCH_Add_Task+0x78>
        		newDelay -= (total - SCH_tasks_G[i].Delay);
 8000f0e:	494d      	ldr	r1, [pc, #308]	; (8001044 <SCH_Add_Task+0x190>)
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	4413      	add	r3, r2
 8000f28:	617b      	str	r3, [r7, #20]
        		break;
 8000f2a:	e007      	b.n	8000f3c <SCH_Add_Task+0x88>
    for(; i < numTask; i++){
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	4b43      	ldr	r3, [pc, #268]	; (8001040 <SCH_Add_Task+0x18c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3ce      	bcc.n	8000eda <SCH_Add_Task+0x26>
        	}
        }
    }

    if (i == numTask) {
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <SCH_Add_Task+0x18c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d103      	bne.n	8000f4e <SCH_Add_Task+0x9a>
            newDelay -= total;
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	617b      	str	r3, [r7, #20]
        }

    for(int j = numTask; j > i; j--){
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	; (8001040 <SCH_Add_Task+0x18c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	e017      	b.n	8000f86 <SCH_Add_Task+0xd2>
        SCH_tasks_G[j] = SCH_tasks_G[j - 1];
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1e5a      	subs	r2, r3, #1
 8000f5a:	483a      	ldr	r0, [pc, #232]	; (8001044 <SCH_Add_Task+0x190>)
 8000f5c:	6939      	ldr	r1, [r7, #16]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4418      	add	r0, r3
 8000f68:	4936      	ldr	r1, [pc, #216]	; (8001044 <SCH_Add_Task+0x190>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	4604      	mov	r4, r0
 8000f76:	461d      	mov	r5, r3
 8000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	6023      	str	r3, [r4, #0]
    for(int j = numTask; j > i; j--){
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d3e3      	bcc.n	8000f56 <SCH_Add_Task+0xa2>
    }
    SCH_tasks_G[i + 1].Delay -= newDelay;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	492c      	ldr	r1, [pc, #176]	; (8001044 <SCH_Add_Task+0x190>)
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	6819      	ldr	r1, [r3, #0]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	1ac9      	subs	r1, r1, r3
 8000faa:	4826      	ldr	r0, [pc, #152]	; (8001044 <SCH_Add_Task+0x190>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4403      	add	r3, r0
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	6019      	str	r1, [r3, #0]
    SCH_tasks_G[i].pTask = pFunction;
 8000fba:	4922      	ldr	r1, [pc, #136]	; (8001044 <SCH_Add_Task+0x190>)
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].Delay = newDelay;
 8000fcc:	491d      	ldr	r1, [pc, #116]	; (8001044 <SCH_Add_Task+0x190>)
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	3304      	adds	r3, #4
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].Period = PERIOD;
 8000fe0:	4918      	ldr	r1, [pc, #96]	; (8001044 <SCH_Add_Task+0x190>)
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3308      	adds	r3, #8
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[i].RunMe = 0;
 8000ff4:	4913      	ldr	r1, [pc, #76]	; (8001044 <SCH_Add_Task+0x190>)
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	330c      	adds	r3, #12
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
    SCH_tasks_G[i].TaskID = TaskID;
 8001008:	490e      	ldr	r1, [pc, #56]	; (8001044 <SCH_Add_Task+0x190>)
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	3310      	adds	r3, #16
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	601a      	str	r2, [r3, #0]

    numTask++;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <SCH_Add_Task+0x18c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a07      	ldr	r2, [pc, #28]	; (8001040 <SCH_Add_Task+0x18c>)
 8001024:	6013      	str	r3, [r2, #0]
    is_add[numTask - 1] = 1;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SCH_Add_Task+0x18c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <SCH_Add_Task+0x194>)
 800102e:	2101      	movs	r1, #1
 8001030:	54d1      	strb	r1, [r2, r3]
 8001032:	e000      	b.n	8001036 <SCH_Add_Task+0x182>
	if(numTask >= SCH_MAX_TASKS) return;
 8001034:	bf00      	nop
}
 8001036:	3724      	adds	r7, #36	; 0x24
 8001038:	46bd      	mov	sp, r7
 800103a:	bcb0      	pop	{r4, r5, r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200000e4 	.word	0x200000e4
 8001044:	20000130 	.word	0x20000130
 8001048:	200000d0 	.word	0x200000d0

0800104c <SCH_Update>:
void SCH_Update(void){ //checked
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	if(is_add[0]){
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <SCH_Update+0x34>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00f      	beq.n	8001078 <SCH_Update+0x2c>
		if(SCH_tasks_G[0].Delay > TICK){
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <SCH_Update+0x38>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b0a      	cmp	r3, #10
 800105e:	d905      	bls.n	800106c <SCH_Update+0x20>
			SCH_tasks_G[0].Delay -= TICK;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <SCH_Update+0x38>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	3b0a      	subs	r3, #10
 8001066:	4a07      	ldr	r2, [pc, #28]	; (8001084 <SCH_Update+0x38>)
 8001068:	6053      	str	r3, [r2, #4]
		else {
			SCH_tasks_G[0].Delay = 0;
			SCH_tasks_G[0].RunMe = 1;
		}
	}
}
 800106a:	e005      	b.n	8001078 <SCH_Update+0x2c>
			SCH_tasks_G[0].Delay = 0;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SCH_Update+0x38>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
			SCH_tasks_G[0].RunMe = 1;
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SCH_Update+0x38>)
 8001074:	2201      	movs	r2, #1
 8001076:	731a      	strb	r2, [r3, #12]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	200000d0 	.word	0x200000d0
 8001084:	20000130 	.word	0x20000130

08001088 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void){ //checked
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
	if(numTask == 0) return;
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <SCH_Dispatch_Tasks+0x5c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d021      	beq.n	80010da <SCH_Dispatch_Tasks+0x52>
		while(SCH_tasks_G[0].RunMe == 1 || SCH_tasks_G[0].Delay == 0){
 8001096:	e017      	b.n	80010c8 <SCH_Dispatch_Tasks+0x40>

			(*SCH_tasks_G[0].pTask)();
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SCH_Dispatch_Tasks+0x60>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4798      	blx	r3

			sTasks tempTask = SCH_tasks_G[0];
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <SCH_Dispatch_Tasks+0x60>)
 80010a0:	1d3c      	adds	r4, r7, #4
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	6023      	str	r3, [r4, #0]
			SCH_Delete_Task(SCH_tasks_G[0].TaskID);
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <SCH_Dispatch_Tasks+0x60>)
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f857 	bl	8001164 <SCH_Delete_Task>
			if(tempTask.Period != 0){
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <SCH_Dispatch_Tasks+0x40>
				SCH_Add_Task(tempTask.pTask, tempTask.Period,
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	68f9      	ldr	r1, [r7, #12]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f7ff fef6 	bl	8000eb4 <SCH_Add_Task>
		while(SCH_tasks_G[0].RunMe == 1 || SCH_tasks_G[0].Delay == 0){
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <SCH_Dispatch_Tasks+0x60>)
 80010ca:	7b1b      	ldrb	r3, [r3, #12]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d0e3      	beq.n	8001098 <SCH_Dispatch_Tasks+0x10>
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SCH_Dispatch_Tasks+0x60>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0df      	beq.n	8001098 <SCH_Dispatch_Tasks+0x10>
 80010d8:	e000      	b.n	80010dc <SCH_Dispatch_Tasks+0x54>
	if(numTask == 0) return;
 80010da:	bf00      	nop
					         tempTask.Period, tempTask.TaskID);
			}
		}
}
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bdb0      	pop	{r4, r5, r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000e4 	.word	0x200000e4
 80010e8:	20000130 	.word	0x20000130

080010ec <SCH_Delete>:
void SCH_Delete(uint32_t TASK_INDEX){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	SCH_tasks_G[TASK_INDEX].pTask = 0 ;
 80010f4:	491a      	ldr	r1, [pc, #104]	; (8001160 <SCH_Delete+0x74>)
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001106:	4916      	ldr	r1, [pc, #88]	; (8001160 <SCH_Delete+0x74>)
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	3304      	adds	r3, #4
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 800111a:	4911      	ldr	r1, [pc, #68]	; (8001160 <SCH_Delete+0x74>)
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3308      	adds	r3, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 800112e:	490c      	ldr	r1, [pc, #48]	; (8001160 <SCH_Delete+0x74>)
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	330c      	adds	r3, #12
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].TaskID = 0;
 8001142:	4907      	ldr	r1, [pc, #28]	; (8001160 <SCH_Delete+0x74>)
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3310      	adds	r3, #16
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000130 	.word	0x20000130

08001164 <SCH_Delete_Task>:
uint8_t SCH_Delete_Task(uint32_t id){ //checked
 8001164:	b4b0      	push	{r4, r5, r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	if(numTask == 0){
 800116c:	4b38      	ldr	r3, [pc, #224]	; (8001250 <SCH_Delete_Task+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <SCH_Delete_Task+0x14>
		return 0;
 8001174:	2300      	movs	r3, #0
 8001176:	e066      	b.n	8001246 <SCH_Delete_Task+0xe2>
	}
	uint8_t success = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
	uint32_t i;
	for(i = 0; i < numTask; i++){
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e00e      	b.n	80011a0 <SCH_Delete_Task+0x3c>
		if(id == SCH_tasks_G[i].TaskID){
 8001182:	4934      	ldr	r1, [pc, #208]	; (8001254 <SCH_Delete_Task+0xf0>)
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3310      	adds	r3, #16
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	429a      	cmp	r2, r3
 8001198:	d008      	beq.n	80011ac <SCH_Delete_Task+0x48>
	for(i = 0; i < numTask; i++){
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3301      	adds	r3, #1
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <SCH_Delete_Task+0xec>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3eb      	bcc.n	8001182 <SCH_Delete_Task+0x1e>
 80011aa:	e000      	b.n	80011ae <SCH_Delete_Task+0x4a>

			break;
 80011ac:	bf00      	nop
		}
	}
	uint32_t delay = SCH_tasks_G[i].Delay;
 80011ae:	4929      	ldr	r1, [pc, #164]	; (8001254 <SCH_Delete_Task+0xf0>)
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	440b      	add	r3, r1
 80011bc:	3304      	adds	r3, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60bb      	str	r3, [r7, #8]
	for (uint32_t j = i; j < numTask - 1; j++){
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	e02b      	b.n	8001220 <SCH_Delete_Task+0xbc>
		SCH_tasks_G[j] = SCH_tasks_G[j + 1];
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	4821      	ldr	r0, [pc, #132]	; (8001254 <SCH_Delete_Task+0xf0>)
 80011ce:	6939      	ldr	r1, [r7, #16]
 80011d0:	460b      	mov	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4418      	add	r0, r3
 80011da:	491e      	ldr	r1, [pc, #120]	; (8001254 <SCH_Delete_Task+0xf0>)
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	4604      	mov	r4, r0
 80011e8:	461d      	mov	r5, r3
 80011ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ee:	682b      	ldr	r3, [r5, #0]
 80011f0:	6023      	str	r3, [r4, #0]
		SCH_tasks_G[j].Delay = SCH_tasks_G[j].Delay + delay;
 80011f2:	4918      	ldr	r1, [pc, #96]	; (8001254 <SCH_Delete_Task+0xf0>)
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	3304      	adds	r3, #4
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	18d1      	adds	r1, r2, r3
 8001208:	4812      	ldr	r0, [pc, #72]	; (8001254 <SCH_Delete_Task+0xf0>)
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4613      	mov	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4403      	add	r3, r0
 8001216:	3304      	adds	r3, #4
 8001218:	6019      	str	r1, [r3, #0]
	for (uint32_t j = i; j < numTask - 1; j++){
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	3301      	adds	r3, #1
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <SCH_Delete_Task+0xec>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3cd      	bcc.n	80011c8 <SCH_Delete_Task+0x64>
	}
	success = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
	is_add[numTask] = 0;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <SCH_Delete_Task+0xec>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a08      	ldr	r2, [pc, #32]	; (8001258 <SCH_Delete_Task+0xf4>)
 8001236:	2100      	movs	r1, #0
 8001238:	54d1      	strb	r1, [r2, r3]
	numTask--;
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SCH_Delete_Task+0xec>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <SCH_Delete_Task+0xec>)
 8001242:	6013      	str	r3, [r2, #0]
	return success;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	371c      	adds	r7, #28
 800124a:	46bd      	mov	sp, r7
 800124c:	bcb0      	pop	{r4, r5, r7}
 800124e:	4770      	bx	lr
 8001250:	200000e4 	.word	0x200000e4
 8001254:	20000130 	.word	0x20000130
 8001258:	200000d0 	.word	0x200000d0

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_MspInit+0x5c>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <HAL_MspInit+0x5c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_MspInit+0x5c>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_MspInit+0x5c>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_MspInit+0x5c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_MspInit+0x5c>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_MspInit+0x60>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_MspInit+0x60>)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010000 	.word	0x40010000

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d0:	d113      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	201c      	movs	r0, #28
 80012f0:	f000 f9a1 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f4:	201c      	movs	r0, #28
 80012f6:	f000 f9ba 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800130c:	e7fe      	b.n	800130c <NMI_Handler+0x4>

0800130e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <HardFault_Handler+0x4>

08001314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler+0x4>

0800131a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <BusFault_Handler+0x4>

08001320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <UsageFault_Handler+0x4>

08001326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800134e:	f000 f87f 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <TIM2_IRQHandler+0x10>)
 800135e:	f000 ffdb 	bl	8002318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000e8 	.word	0x200000e8

0800136c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff fff8 	bl	800136c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800137e:	490c      	ldr	r1, [pc, #48]	; (80013b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001380:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001394:	4c09      	ldr	r4, [pc, #36]	; (80013bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f001 faf9 	bl	8002998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff fb0f 	bl	80009c8 <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80013b4:	08002a44 	.word	0x08002a44
  ldr r2, =_sbss
 80013b8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80013bc:	200002c4 	.word	0x200002c4

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f923 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff ff3c 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f93b 	bl	800168a <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f903 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000094 	.word	0x20000094
 8001448:	2000009c 	.word	0x2000009c
 800144c:	20000098 	.word	0x20000098

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x1c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x20>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <HAL_IncTick+0x20>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	2000009c 	.word	0x2000009c
 8001470:	200002c0 	.word	0x200002c0

08001474 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b02      	ldr	r3, [pc, #8]	; (8001484 <HAL_GetTick+0x10>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	200002c0 	.word	0x200002c0

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4906      	ldr	r1, [pc, #24]	; (8001520 <__NVIC_EnableIRQ+0x34>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff90 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff2d 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff42 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff90 	bl	8001578 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5f 	bl	8001524 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff35 	bl	80014ec <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b08b      	sub	sp, #44	; 0x2c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e148      	b.n	800194a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b8:	2201      	movs	r2, #1
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8137 	bne.w	8001944 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4aa3      	ldr	r2, [pc, #652]	; (8001968 <HAL_GPIO_Init+0x2c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d05e      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016e0:	4aa1      	ldr	r2, [pc, #644]	; (8001968 <HAL_GPIO_Init+0x2c4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d875      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016e6:	4aa1      	ldr	r2, [pc, #644]	; (800196c <HAL_GPIO_Init+0x2c8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d058      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016ec:	4a9f      	ldr	r2, [pc, #636]	; (800196c <HAL_GPIO_Init+0x2c8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d86f      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016f2:	4a9f      	ldr	r2, [pc, #636]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d052      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016f8:	4a9d      	ldr	r2, [pc, #628]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d869      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016fe:	4a9d      	ldr	r2, [pc, #628]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04c      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001704:	4a9b      	ldr	r2, [pc, #620]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d863      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800170a:	4a9b      	ldr	r2, [pc, #620]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d046      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001710:	4a99      	ldr	r2, [pc, #612]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d85d      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 8001716:	2b12      	cmp	r3, #18
 8001718:	d82a      	bhi.n	8001770 <HAL_GPIO_Init+0xcc>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d859      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <HAL_GPIO_Init+0x80>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	0800179f 	.word	0x0800179f
 8001728:	08001779 	.word	0x08001779
 800172c:	0800178b 	.word	0x0800178b
 8001730:	080017cd 	.word	0x080017cd
 8001734:	080017d3 	.word	0x080017d3
 8001738:	080017d3 	.word	0x080017d3
 800173c:	080017d3 	.word	0x080017d3
 8001740:	080017d3 	.word	0x080017d3
 8001744:	080017d3 	.word	0x080017d3
 8001748:	080017d3 	.word	0x080017d3
 800174c:	080017d3 	.word	0x080017d3
 8001750:	080017d3 	.word	0x080017d3
 8001754:	080017d3 	.word	0x080017d3
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017d3 	.word	0x080017d3
 8001760:	080017d3 	.word	0x080017d3
 8001764:	080017d3 	.word	0x080017d3
 8001768:	08001781 	.word	0x08001781
 800176c:	08001795 	.word	0x08001795
 8001770:	4a82      	ldr	r2, [pc, #520]	; (800197c <HAL_GPIO_Init+0x2d8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001776:	e02c      	b.n	80017d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e029      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	3304      	adds	r3, #4
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e024      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	3308      	adds	r3, #8
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e01f      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	330c      	adds	r3, #12
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e01a      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a6:	2304      	movs	r3, #4
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e013      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	611a      	str	r2, [r3, #16]
          break;
 80017be:	e009      	b.n	80017d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	615a      	str	r2, [r3, #20]
          break;
 80017ca:	e003      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          break;
 80017d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d801      	bhi.n	80017de <HAL_GPIO_Init+0x13a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_Init+0x13e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3304      	adds	r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d802      	bhi.n	80017f0 <HAL_GPIO_Init+0x14c>
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x152>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3b08      	subs	r3, #8
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	210f      	movs	r1, #15
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	6a39      	ldr	r1, [r7, #32]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8090 	beq.w	8001944 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001824:	4b56      	ldr	r3, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a55      	ldr	r2, [pc, #340]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800183c:	4a51      	ldr	r2, [pc, #324]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2e4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1e0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2e8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x2ec>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1d8>
 8001878:	2302      	movs	r3, #2
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 800187c:	2303      	movs	r3, #3
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001884:	2300      	movs	r3, #0
 8001886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001896:	493b      	ldr	r1, [pc, #236]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4937      	ldr	r1, [pc, #220]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4933      	ldr	r1, [pc, #204]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	492d      	ldr	r1, [pc, #180]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60cb      	str	r3, [r1, #12]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4929      	ldr	r1, [pc, #164]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4923      	ldr	r1, [pc, #140]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	491f      	ldr	r1, [pc, #124]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001918:	4013      	ands	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4919      	ldr	r1, [pc, #100]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	4915      	ldr	r1, [pc, #84]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001940:	4013      	ands	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	3301      	adds	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	f47f aeaf 	bne.w	80016b8 <HAL_GPIO_Init+0x14>
  }
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	372c      	adds	r7, #44	; 0x2c
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	10320000 	.word	0x10320000
 800196c:	10310000 	.word	0x10310000
 8001970:	10220000 	.word	0x10220000
 8001974:	10210000 	.word	0x10210000
 8001978:	10120000 	.word	0x10120000
 800197c:	10110000 	.word	0x10110000
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40011000 	.word	0x40011000
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e001      	b.n	80019ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	807b      	strh	r3, [r7, #2]
 80019d2:	4613      	mov	r3, r2
 80019d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d6:	787b      	ldrb	r3, [r7, #1]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	041a      	lsls	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	611a      	str	r2, [r3, #16]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a08:	887a      	ldrh	r2, [r7, #2]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	041a      	lsls	r2, r3, #16
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	400b      	ands	r3, r1
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e26c      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8087 	beq.w	8001b56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a48:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d00c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a54:	4b8f      	ldr	r3, [pc, #572]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d112      	bne.n	8001a86 <HAL_RCC_OscConfig+0x5e>
 8001a60:	4b8c      	ldr	r3, [pc, #560]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d10b      	bne.n	8001a86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6e:	4b89      	ldr	r3, [pc, #548]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d06c      	beq.n	8001b54 <HAL_RCC_OscConfig+0x12c>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d168      	bne.n	8001b54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e246      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x76>
 8001a90:	4b80      	ldr	r3, [pc, #512]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a7f      	ldr	r2, [pc, #508]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e02e      	b.n	8001afc <HAL_RCC_OscConfig+0xd4>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x98>
 8001aa6:	4b7b      	ldr	r3, [pc, #492]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a7a      	ldr	r2, [pc, #488]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a77      	ldr	r2, [pc, #476]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e01d      	b.n	8001afc <HAL_RCC_OscConfig+0xd4>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0xbc>
 8001aca:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a71      	ldr	r2, [pc, #452]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6e      	ldr	r2, [pc, #440]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0xd4>
 8001ae4:	4b6b      	ldr	r3, [pc, #428]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b68      	ldr	r3, [pc, #416]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a67      	ldr	r2, [pc, #412]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fcb6 	bl	8001474 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fcb2 	bl	8001474 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1fa      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0xe4>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fca2 	bl	8001474 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fc9e 	bl	8001474 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e1e6      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x10c>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d063      	beq.n	8001c2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d11c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x18c>
 8001b7a:	4b46      	ldr	r3, [pc, #280]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d116      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_RCC_OscConfig+0x176>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e1ba      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4939      	ldr	r1, [pc, #228]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb2:	e03a      	b.n	8001c2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fc57 	bl	8001474 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff fc53 	bl	8001474 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e19b      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4927      	ldr	r1, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
 8001bfc:	e015      	b.n	8001c2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_RCC_OscConfig+0x270>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fc36 	bl	8001474 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fc32 	bl	8001474 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e17a      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03a      	beq.n	8001cac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d019      	beq.n	8001c72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c44:	f7ff fc16 	bl	8001474 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fc12 	bl	8001474 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e15a      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f000 fa9a 	bl	80021a4 <RCC_Delay>
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c72:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7ff fbfc 	bl	8001474 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7e:	e00f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff fbf8 	bl	8001474 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d908      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e140      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	42420000 	.word	0x42420000
 8001c9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	4b9e      	ldr	r3, [pc, #632]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1e9      	bne.n	8001c80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80a6 	beq.w	8001e06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbe:	4b97      	ldr	r3, [pc, #604]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b94      	ldr	r3, [pc, #592]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a93      	ldr	r2, [pc, #588]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]
 8001cd6:	4b91      	ldr	r3, [pc, #580]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d118      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a8a      	ldr	r2, [pc, #552]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fbb9 	bl	8001474 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d06:	f7ff fbb5 	bl	8001474 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b64      	cmp	r3, #100	; 0x64
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0fd      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	4b81      	ldr	r3, [pc, #516]	; (8001f20 <HAL_RCC_OscConfig+0x4f8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d106      	bne.n	8001d3a <HAL_RCC_OscConfig+0x312>
 8001d2c:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a7a      	ldr	r2, [pc, #488]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	e02d      	b.n	8001d96 <HAL_RCC_OscConfig+0x36e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x334>
 8001d42:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a75      	ldr	r2, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	6213      	str	r3, [r2, #32]
 8001d4e:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a72      	ldr	r2, [pc, #456]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	6213      	str	r3, [r2, #32]
 8001d5a:	e01c      	b.n	8001d96 <HAL_RCC_OscConfig+0x36e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b05      	cmp	r3, #5
 8001d62:	d10c      	bne.n	8001d7e <HAL_RCC_OscConfig+0x356>
 8001d64:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	4a6c      	ldr	r2, [pc, #432]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	f043 0304 	orr.w	r3, r3, #4
 8001d6e:	6213      	str	r3, [r2, #32]
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a69      	ldr	r2, [pc, #420]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	e00b      	b.n	8001d96 <HAL_RCC_OscConfig+0x36e>
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a66      	ldr	r2, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a63      	ldr	r2, [pc, #396]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d015      	beq.n	8001dca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff fb69 	bl	8001474 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7ff fb65 	bl	8001474 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0ab      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	4b57      	ldr	r3, [pc, #348]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0ee      	beq.n	8001da6 <HAL_RCC_OscConfig+0x37e>
 8001dc8:	e014      	b.n	8001df4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dca:	f7ff fb53 	bl	8001474 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7ff fb4f 	bl	8001474 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e095      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de8:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1ee      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d105      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a47      	ldr	r2, [pc, #284]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8081 	beq.w	8001f12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e10:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d061      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d146      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fb23 	bl	8001474 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e32:	f7ff fb1f 	bl	8001474 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e067      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e44:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e58:	d108      	bne.n	8001e6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e5a:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	492d      	ldr	r1, [pc, #180]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6c:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a19      	ldr	r1, [r3, #32]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	4927      	ldr	r1, [pc, #156]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff faf3 	bl	8001474 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff faef 	bl	8001474 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e037      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x46a>
 8001eb0:	e02f      	b.n	8001f12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <HAL_RCC_OscConfig+0x4fc>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fadc 	bl	8001474 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff fad8 	bl	8001474 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e020      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x498>
 8001ede:	e018      	b.n	8001f12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e013      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40007000 	.word	0x40007000
 8001f24:	42420060 	.word	0x42420060

08001f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d0      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d910      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b67      	ldr	r3, [pc, #412]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4965      	ldr	r1, [pc, #404]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0b8      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f84:	4b59      	ldr	r3, [pc, #356]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a52      	ldr	r2, [pc, #328]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	494d      	ldr	r1, [pc, #308]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d040      	beq.n	8002048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d115      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07f      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe6:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e073      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e06b      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4936      	ldr	r1, [pc, #216]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002018:	f7ff fa2c 	bl	8001474 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	e00a      	b.n	8002036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7ff fa28 	bl	8001474 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	; 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e053      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 020c 	and.w	r2, r3, #12
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	429a      	cmp	r2, r3
 8002046:	d1eb      	bne.n	8002020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d210      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4922      	ldr	r1, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e032      	b.n	80020de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4916      	ldr	r1, [pc, #88]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	490e      	ldr	r1, [pc, #56]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b6:	f000 f821 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	490a      	ldr	r1, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x1c8>)
 80020c8:	5ccb      	ldrb	r3, [r1, r3]
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1cc>)
 80020d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_ClockConfig+0x1d0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f98a 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08002a18 	.word	0x08002a18
 80020f4:	20000094 	.word	0x20000094
 80020f8:	20000098 	.word	0x20000098

080020fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002116:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x30>
 8002126:	2b08      	cmp	r3, #8
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x36>
 800212a:	e027      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800212e:	613b      	str	r3, [r7, #16]
      break;
 8002130:	e027      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	0c9b      	lsrs	r3, r3, #18
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800213c:	5cd3      	ldrb	r3, [r2, r3]
 800213e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d010      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800214a:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_RCC_GetSysClockFreq+0x94>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0c5b      	lsrs	r3, r3, #17
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800215e:	fb02 f203 	mul.w	r2, r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e004      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002170:	fb02 f303 	mul.w	r3, r2, r3
 8002174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	613b      	str	r3, [r7, #16]
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetSysClockFreq+0x98>)
 800217e:	613b      	str	r3, [r7, #16]
      break;
 8002180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002182:	693b      	ldr	r3, [r7, #16]
}
 8002184:	4618      	mov	r0, r3
 8002186:	371c      	adds	r7, #28
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	08002a28 	.word	0x08002a28
 800219c:	08002a38 	.word	0x08002a38
 80021a0:	003d0900 	.word	0x003d0900

080021a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <RCC_Delay+0x34>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <RCC_Delay+0x38>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0a5b      	lsrs	r3, r3, #9
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021c0:	bf00      	nop
  }
  while (Delay --);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1e5a      	subs	r2, r3, #1
 80021c6:	60fa      	str	r2, [r7, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f9      	bne.n	80021c0 <RCC_Delay+0x1c>
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000094 	.word	0x20000094
 80021dc:	10624dd3 	.word	0x10624dd3

080021e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e041      	b.n	8002276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff f85a 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f000 fa56 	bl	80026d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d001      	beq.n	8002298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e035      	b.n	8002304 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0201 	orr.w	r2, r2, #1
 80022ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a16      	ldr	r2, [pc, #88]	; (8002310 <HAL_TIM_Base_Start_IT+0x90>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_TIM_Base_Start_IT+0x4e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d004      	beq.n	80022ce <HAL_TIM_Base_Start_IT+0x4e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_TIM_Base_Start_IT+0x94>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d111      	bne.n	80022f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d010      	beq.n	8002302 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f0:	e007      	b.n	8002302 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40000400 	.word	0x40000400

08002318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0202 	mvn.w	r2, #2
 800234c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f998 	bl	8002698 <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f98b 	bl	8002686 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f99a 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0204 	mvn.w	r2, #4
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f972 	bl	8002698 <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f965 	bl	8002686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f974 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d020      	beq.n	8002414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01b      	beq.n	8002414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0208 	mvn.w	r2, #8
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2204      	movs	r2, #4
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f94c 	bl	8002698 <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f93f 	bl	8002686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f94e 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	d020      	beq.n	8002460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0210 	mvn.w	r2, #16
 8002430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2208      	movs	r2, #8
 8002436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f926 	bl	8002698 <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f919 	bl	8002686 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f928 	bl	80026aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0201 	mvn.w	r2, #1
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fbd0 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa6f 	bl	8002986 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8f8 	bl	80026bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0220 	mvn.w	r2, #32
 80024e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa42 	bl	8002974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_TIM_ConfigClockSource+0x1c>
 8002510:	2302      	movs	r3, #2
 8002512:	e0b4      	b.n	800267e <HAL_TIM_ConfigClockSource+0x186>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800253a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254c:	d03e      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0xd4>
 800254e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002552:	f200 8087 	bhi.w	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255a:	f000 8086 	beq.w	800266a <HAL_TIM_ConfigClockSource+0x172>
 800255e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002562:	d87f      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b70      	cmp	r3, #112	; 0x70
 8002566:	d01a      	beq.n	800259e <HAL_TIM_ConfigClockSource+0xa6>
 8002568:	2b70      	cmp	r3, #112	; 0x70
 800256a:	d87b      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b60      	cmp	r3, #96	; 0x60
 800256e:	d050      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x11a>
 8002570:	2b60      	cmp	r3, #96	; 0x60
 8002572:	d877      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b50      	cmp	r3, #80	; 0x50
 8002576:	d03c      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0xfa>
 8002578:	2b50      	cmp	r3, #80	; 0x50
 800257a:	d873      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d058      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x13a>
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	d86f      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b30      	cmp	r3, #48	; 0x30
 8002586:	d064      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x15a>
 8002588:	2b30      	cmp	r3, #48	; 0x30
 800258a:	d86b      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b20      	cmp	r3, #32
 800258e:	d060      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x15a>
 8002590:	2b20      	cmp	r3, #32
 8002592:	d867      	bhi.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d05c      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x15a>
 8002598:	2b10      	cmp	r3, #16
 800259a:	d05a      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x15a>
 800259c:	e062      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f000 f96a 	bl	8002886 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	609a      	str	r2, [r3, #8]
      break;
 80025ca:	e04f      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	6899      	ldr	r1, [r3, #8]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f000 f953 	bl	8002886 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ee:	609a      	str	r2, [r3, #8]
      break;
 80025f0:	e03c      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f8ca 	bl	8002798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2150      	movs	r1, #80	; 0x50
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f921 	bl	8002852 <TIM_ITRx_SetConfig>
      break;
 8002610:	e02c      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	461a      	mov	r2, r3
 8002620:	f000 f8e8 	bl	80027f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2160      	movs	r1, #96	; 0x60
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f911 	bl	8002852 <TIM_ITRx_SetConfig>
      break;
 8002630:	e01c      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	461a      	mov	r2, r3
 8002640:	f000 f8aa 	bl	8002798 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2140      	movs	r1, #64	; 0x40
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f901 	bl	8002852 <TIM_ITRx_SetConfig>
      break;
 8002650:	e00c      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f000 f8f8 	bl	8002852 <TIM_ITRx_SetConfig>
      break;
 8002662:	e003      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e000      	b.n	800266c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800266a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
	...

080026d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <TIM_Base_SetConfig+0xc0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0x28>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0x28>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a28      	ldr	r2, [pc, #160]	; (8002794 <TIM_Base_SetConfig+0xc4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d108      	bne.n	800270a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a20      	ldr	r2, [pc, #128]	; (8002790 <TIM_Base_SetConfig+0xc0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <TIM_Base_SetConfig+0x52>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d003      	beq.n	8002722 <TIM_Base_SetConfig+0x52>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <TIM_Base_SetConfig+0xc4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d108      	bne.n	8002734 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <TIM_Base_SetConfig+0xc0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d103      	bne.n	8002768 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f023 0201 	bic.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	611a      	str	r2, [r3, #16]
  }
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40000400 	.word	0x40000400

08002798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f023 0201 	bic.w	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f023 030a 	bic.w	r3, r3, #10
 80027d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	621a      	str	r2, [r3, #32]
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	f023 0210 	bic.w	r2, r3, #16
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800281e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	031b      	lsls	r3, r3, #12
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002830:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	621a      	str	r2, [r3, #32]
}
 8002848:	bf00      	nop
 800284a:	371c      	adds	r7, #28
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	f043 0307 	orr.w	r3, r3, #7
 8002874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	609a      	str	r2, [r3, #8]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002886:	b480      	push	{r7}
 8002888:	b087      	sub	sp, #28
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	021a      	lsls	r2, r3, #8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	609a      	str	r2, [r3, #8]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028d8:	2302      	movs	r3, #2
 80028da:	e041      	b.n	8002960 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d009      	beq.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d004      	beq.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10c      	bne.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800293a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	4313      	orrs	r3, r2
 8002944:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40012c00 	.word	0x40012c00
 8002970:	40000400 	.word	0x40000400

08002974 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <__libc_init_array>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	2600      	movs	r6, #0
 800299c:	4d0c      	ldr	r5, [pc, #48]	; (80029d0 <__libc_init_array+0x38>)
 800299e:	4c0d      	ldr	r4, [pc, #52]	; (80029d4 <__libc_init_array+0x3c>)
 80029a0:	1b64      	subs	r4, r4, r5
 80029a2:	10a4      	asrs	r4, r4, #2
 80029a4:	42a6      	cmp	r6, r4
 80029a6:	d109      	bne.n	80029bc <__libc_init_array+0x24>
 80029a8:	f000 f822 	bl	80029f0 <_init>
 80029ac:	2600      	movs	r6, #0
 80029ae:	4d0a      	ldr	r5, [pc, #40]	; (80029d8 <__libc_init_array+0x40>)
 80029b0:	4c0a      	ldr	r4, [pc, #40]	; (80029dc <__libc_init_array+0x44>)
 80029b2:	1b64      	subs	r4, r4, r5
 80029b4:	10a4      	asrs	r4, r4, #2
 80029b6:	42a6      	cmp	r6, r4
 80029b8:	d105      	bne.n	80029c6 <__libc_init_array+0x2e>
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
 80029bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c0:	4798      	blx	r3
 80029c2:	3601      	adds	r6, #1
 80029c4:	e7ee      	b.n	80029a4 <__libc_init_array+0xc>
 80029c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ca:	4798      	blx	r3
 80029cc:	3601      	adds	r6, #1
 80029ce:	e7f2      	b.n	80029b6 <__libc_init_array+0x1e>
 80029d0:	08002a3c 	.word	0x08002a3c
 80029d4:	08002a3c 	.word	0x08002a3c
 80029d8:	08002a3c 	.word	0x08002a3c
 80029dc:	08002a40 	.word	0x08002a40

080029e0 <memset>:
 80029e0:	4603      	mov	r3, r0
 80029e2:	4402      	add	r2, r0
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d100      	bne.n	80029ea <memset+0xa>
 80029e8:	4770      	bx	lr
 80029ea:	f803 1b01 	strb.w	r1, [r3], #1
 80029ee:	e7f9      	b.n	80029e4 <memset+0x4>

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
